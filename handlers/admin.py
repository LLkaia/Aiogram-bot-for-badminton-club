from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import admin_kb, kb_client
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from data_base import sqlite_db

ID = [382690791, 5394569401, 612548655]

class FSMAdmin(StatesGroup):
    gym = State()
    day = State()
    time = State()
    free = State()
    des = State()

class FSMDelete(StatesGroup):
    gym = State()

class FSMStart(StatesGroup):
    answer = State()
    data = State()

async def admin_in(message : types.Message):
    if message.from_user.id in ID:
        await message.answer('–ë–æ—Ç —É–≤–∞–∂–Ω–æ —Å–ª—É—Ö–∞—î –∞–¥–º—ñ–Ω–∞!', reply_markup=admin_kb.button_case_admin)
    else:
        await message.answer('–£ –í–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É!')

async def back_menu(message : types.Message):
    await message.answer('–û–∫–µ–π', reply_markup=kb_client)

async def add_new(message : types.Message):
    if message.from_user.id in ID:
        await FSMAdmin.gym.set()
        # await message.reply('–í —è–∫–∏–π –∑–∞–ª –í–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?', reply_markup=InlineKeyboardMarkup().\
        #                 row(InlineKeyboardButton('–í–§–ï–£', callback_data='vfeu'),\
        #                     InlineKeyboardButton('–í–ù–¢–£', callback_data='vntu')))
        await message.reply('–í —è–∫–∏–π –∑–∞–ª –í–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?', reply_markup=InlineKeyboardMarkup().\
                        row(InlineKeyboardButton('–í–ù–¢–£', callback_data='vntu')))

async def gym_new(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id in ID:
        async with state.proxy() as data:
            data['gym'] = callback.data
        await FSMAdmin.next()
        await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∏–∂–Ω—è, –∫—É–¥–∏ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:',
                                      reply_markup=InlineKeyboardMarkup(). \
                                      row(InlineKeyboardButton('–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', callback_data='1'), \
                                          InlineKeyboardButton('–í—ñ–≤—Ç–æ—Ä–æ–∫', callback_data='2'), \
                                          InlineKeyboardButton('–°–µ—Ä–µ–¥–∞', callback_data='3')). \
                                      row(InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä', callback_data='4'), \
                                          InlineKeyboardButton("–ü'—è—Ç–Ω–∏—Ü—è", callback_data="5"), \
                                          InlineKeyboardButton('–°—É–±–æ—Ç–∞', callback_data='6'), \
                                          InlineKeyboardButton('–ù–µ–¥—ñ–ª—è', callback_data='7')))

async def day_new(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id in ID:
        async with state.proxy() as data:
            data['daytime'] = callback.data
        await FSMAdmin.next()
        await callback.message.answer('–í–∫–∞–∂—ñ—Ç—å —á–∞—Å, –æ –∫–æ—Ç—Ä—ñ–π —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—å:')

async def time_new(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['daytime'] += ' ' + message.text
        await FSMAdmin.next()
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å:')

async def free_new(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['free'] = message.text
        await FSMAdmin.next()
        await message.answer('–î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏):')

async def des_new(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['des'] = message.text
        await sqlite_db.sql_add_command(state, message)
        await state.finish()

async def del_what(message: types.Message):
    if message.from_user.id in ID:
        await FSMDelete.gym.set()
        # await message.reply('–í —è–∫–æ–º—É –∑–∞–ª—ñ –í–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?', reply_markup=InlineKeyboardMarkup(). \
        #                     row(InlineKeyboardButton('–í–§–ï–£', callback_data='vfeu'), \
        #                         InlineKeyboardButton('–í–ù–¢–£', callback_data='vntu')))
        await message.reply('–í —è–∫–æ–º—É –∑–∞–ª—ñ –í–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?', reply_markup=InlineKeyboardMarkup(). \
                            row(InlineKeyboardButton('–í–ù–¢–£', callback_data='vntu')))

async def del_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''), data['gym'])
        await callback_query.answer(text=f'–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ {data["gym"]} –≤ {sqlite_db.dirday[callback_query.data.replace("del ", "")[0]]}'
                                         f' {callback_query.data.replace("del ", "")[2:]} –≤–∏–¥–∞–ª–µ–Ω–µ.', show_alert=True)
    await state.finish()

async def del_gym(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id in ID:
        async with state.proxy() as data:
            data['gym'] = callback.data
            read = await sqlite_db.sql_read(data['gym'])
        if not read:
            await state.finish()
            await bot.send_message(callback.from_user.id, text='–¢—É—Ç –π —Ç–∞–∫ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å =)')
            return
        for ret in read:
            await bot.send_message(callback.from_user.id, text=f'{sqlite_db.dirday[ret[0][0]]} {ret[0][2:]}', reply_markup=InlineKeyboardMarkup(). \
                                   add(InlineKeyboardButton(f'^^^–í–∏–¥–∞–ª–∏—Ç–∏^^^', callback_data=f'del {ret[0]}')))

async def cencel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        current_state = await state.get_state()
        if current_state is None:
            await message.reply('–¢–∞ –í–∏ –π –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–ª–∏')
            return
        await state.finish()
        await message.reply('–û–∫–µ–π')

async def start_new_week(message: types.Message):
    if message.from_user.id in ID:
        await FSMStart.answer.set()
        await message.reply('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ –≤ —Ü—å–æ–º—É?', reply_markup=InlineKeyboardMarkup().row(
            InlineKeyboardButton('–¢–ê–ö', callback_data='yes'), InlineKeyboardButton('–ù–Ü', callback_data='no')
        ))

async def ofc_new_week(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'yes':
        await bot.send_message(callback.from_user.id, '–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∞—Å–æ–≤–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.23-07.01.23')
        await FSMStart.next()
    else:
        await bot.send_message(callback.from_user.id, '–û–∫–µ–π, –Ω–µ —Ö–æ—Ç—ñ–ª–æ—Å—å –±–∏ –≤—Å–µ —Å—Ç–µ—Ä—Ç–∏')
        await state.finish()

async def data_new_week(message : types.Message, state: FSMContext):
    await sqlite_db.clear_all_visitors(message.text)
    users = sqlite_db.get_users()
    for row in users:
        try:
            await bot.send_message(row[0], '‚ùóÔ∏è–†–æ–∑–ø–æ—á–∞—Ç–æ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å‚ùóÔ∏è')
            if int(row[1]) != 1:
                sqlite_db.set_active(row[0], 1)
        except:
            sqlite_db.set_active(row[0], 0)
    await state.finish()

async def send_all(message: types.Message):
    if message.from_user.id in ID:
        text = message.text[6:]
        users = sqlite_db.get_users()
        for row in users:
            try:
                await bot.send_message(row[0], text)
                if int(row[1]) != 1:
                    sqlite_db.set_active(row[0], 1)
            except:
                sqlite_db.set_active(row[0], 0)
        await bot.send_message(message.from_user.id, '–†–æ–∑—ñ—Å–ª–∞–Ω–æ!')

def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(cencel_handler, Text(equals='üõë –í–Ü–î–ú–Ü–ù–ê (—è –ø–µ—Ä–µ–¥—É–º–∞–≤ —Ü–µ —Ä–æ–±–∏—Ç–∏, –∞ –±–æ—Ç —á–µ–∫–∞—î)'), state="*", chat_type='private')
    dp.register_message_handler(admin_in, commands=['admin'], chat_type='private')
    dp.register_message_handler(add_new, Text(equals='–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'), state=None, chat_type='private')
    dp.register_callback_query_handler(gym_new, state=FSMAdmin.gym)
    dp.register_callback_query_handler(day_new, state=FSMAdmin.day)
    dp.register_message_handler(time_new, state=FSMAdmin.time)
    dp.register_message_handler(free_new, state=FSMAdmin.free)
    dp.register_message_handler(des_new, state=FSMAdmin.des)
    dp.register_message_handler(del_what, Text(equals='–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'), state=None, chat_type='private')
    dp.register_callback_query_handler(del_callback, Text(startswith='del '), state=FSMDelete.gym)
    dp.register_callback_query_handler(del_gym, state=FSMDelete.gym)
    dp.register_message_handler(start_new_week, Text(equals='–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å'), state=None, chat_type='private')
    dp.register_callback_query_handler(ofc_new_week, state=FSMStart.answer)
    dp.register_message_handler(data_new_week, state=FSMStart.data)
    dp.register_message_handler(send_all, commands=['send'], chat_type='private')
    dp.register_message_handler(back_menu, Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), chat_type='private')